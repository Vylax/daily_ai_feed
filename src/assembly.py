import logging
import datetime
import re
import html # For escaping
import markdown # Import the markdown library

logger = logging.getLogger(__name__)

# --- Helper Functions (May need adjustments for HTML) ---

def extract_text_from_html(html_string, label):
    """Extracts text content following a specific bolded label within a <p> tag."""
    # Regex to find <p><strong>Label:</strong> Content</p>
    # It captures the content part, handling potential whitespace and HTML entities
    pattern = re.compile(rf"<p><strong>{re.escape(label)}:</strong>\\s*(.*?)\\s*</p>", re.IGNORECASE | re.DOTALL)
    match = pattern.search(html_string)
    if match:
        # Basic unescaping for common entities, more robust parsing might be needed for complex HTML
        text = match.group(1).strip()
        text = html.unescape(text)
        # Remove potential leftover simple tags if needed, e.g., from unexpected model output
        text = re.sub(r"<[^>]+>", "", text)
        return text
    return None

def get_tutorial_topic_from_html(generated_tutorial_html):
    """Extracts the tutorial topic from the H2 tag in the generated tutorial HTML."""
    if not generated_tutorial_html:
        return "N/A"
    # Look for the pattern like: <h2 ...>üõ†Ô∏è Skill Up Tutorial: [Topic]</h2>
    match = re.search(r"<h2[^>]*>.*?Skill Up Tutorial:\\s*(.*?)</h2>", generated_tutorial_html, re.IGNORECASE | re.DOTALL)
    if match:
        return match.group(1).strip()
    # Fallback if the exact pattern isn't found
    match = re.search(r"<h2[^>]*>(.*?)</h2>", generated_tutorial_html, re.IGNORECASE | re.DOTALL)
    if match:
        return match.group(1).strip() # Return the whole H2 content as fallback
    return "Unknown Topic"

# --- Main Assembly Function (Generates HTML) ---

def assemble_digest(news_items_data, feed_tutorials_data, generated_tutorial_md):
    """Assembles the final HTML digest from the components with improved styling and overview section."""
    now = datetime.datetime.now()
    # Format like: April 3, 2025
    date_str = now.strftime("%B %d, %Y")

    # Data format from summarization: [{'url':..., 'title':..., 'type':..., 'summary':..., 'insight':..., 'angle':..., 'move':...}, ...]
    # Tutorial is still Markdown string: generated_tutorial_md

    # --- Convert Tutorial Markdown to HTML ---
    generated_tutorial_html = ""
    tutorial_topic = "No custom tutorial today." # Default
    if generated_tutorial_md:
        try:
            # Use markdown library to convert. Enable extensions for better formatting.
            # Fenced code blocks (```python ... ```) and tables are common.
            generated_tutorial_html = markdown.markdown(
                generated_tutorial_md,
                extensions=['fenced_code', 'tables', 'sane_lists', 'codehilite'] # Added codehilite
            )
            # Extract topic AFTER conversion (assuming H2 is generated by markdown)
            # Regex needs to find H2 generated from ## üõ†Ô∏è Skill Up Tutorial: ...
            topic_match = re.search(r'<h2(?: id="[^\"]*")?>.*?Skill Up Tutorial:\\s*(.*?)</h2>', generated_tutorial_html, re.IGNORECASE)
            if topic_match:
                tutorial_topic = topic_match.group(1).strip()
            else:
                 # Fallback if H2 is not as expected
                 logger.warning("Could not extract tutorial topic from converted HTML.")
                 tutorial_topic = "Topic Extraction Failed"

            # Remove the H2 from the converted HTML as we have a section header
            # This prevents duplicate titles
            generated_tutorial_html = re.sub(r'<h2(?: id="[^\"]*")?>.*?Skill Up Tutorial:.*?</h2>', '', generated_tutorial_html, count=1, flags=re.IGNORECASE | re.DOTALL).strip()

        except Exception as e:
            logger.error(f"Failed to convert generated tutorial Markdown to HTML: {e}")
            generated_tutorial_html = "<p><em>Error converting tutorial content to HTML.</em></p>"
            tutorial_topic = "Conversion Error"


    # --- Start HTML Document ---
    html_parts = []
    html_parts.append("<!DOCTYPE html>")
    html_parts.append("<html>")
    html_parts.append("<head>")
    html_parts.append("<meta charset=\"UTF-8\">")
    html_parts.append(f"<title>AI Daily Digest - {date_str}</title>")
    # Updated CSS for better spacing, code blocks, etc.
    html_parts.append("""<style>
        body { font-family: 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f8f9fa; color: #343a40; }
        .container { width: 95%; max-width: 750px; margin: 20px auto; background-color: #ffffff; border: 1px solid #dee2e6; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
        .header { background-color: #007bff; color: #ffffff; padding: 25px 30px; text-align: center; border-bottom: 5px solid #0056b3; }
        .header h1 { margin: 0; font-size: 28px; font-weight: 600; }
        .header p { margin: 5px 0 0; font-size: 16px; font-style: italic; opacity: 0.9; }
        .overview { background-color: #eaf2fa; padding: 15px 25px; margin: 25px; border-left: 4px solid #007bff; border-radius: 4px; }
        .overview h3 { margin-top: 0; margin-bottom: 10px; color: #0056b3; font-size: 18px; }
        .overview ul { margin: 0; padding-left: 20px; }
        .overview li { margin-bottom: 5px; }
        .section { padding: 20px 30px; border-bottom: 1px solid #eee; }
        .section:last-child { border-bottom: none; }
        .section h2 { background-color: #f1f3f5; padding: 12px 20px; margin: -20px -30px 20px -30px; font-size: 20px; font-weight: 600; color: #495057; border-bottom: 1px solid #dee2e6; display: flex; align-items: center; }
        .section h2 img.google-icon { margin-right: 8px; }
        .item { margin-bottom: 25px; padding-bottom: 25px; border-bottom: 1px dashed #ced4da; }
        .item:last-child { margin-bottom: 0; padding-bottom: 0; border-bottom: none; }
        .item h3 { margin-top: 0; margin-bottom: 5px; font-size: 18px; color: #0056b3; font-weight: 600; }
        /* Removed item emoji from H3, kept in section H2 */
        .item p { margin-top: 5px; margin-bottom: 12px; font-size: 15px; color: #343a40; }
        .item p strong { color: #212529; font-weight: 600; }
        .item a { color: #007bff; text-decoration: none; }
        .item a:hover { text-decoration: underline; }
        .source-link { font-size: 0.9em; color: #6c757d; margin-top: -8px !important; margin-bottom: 15px !important; word-break: break-all; }
        .google-icon { width: 16px; height: 16px; vertical-align: middle; /* Adjusted alignment */ }
        .actionable-ideas-list ul { list-style-type: none; padding-left: 0; }
        .actionable-ideas-list li { background-color: #f8f9fa; margin-bottom: 10px; padding: 12px 15px; border-left: 3px solid #17a2b8; border-radius: 4px; }
        .actionable-ideas-list li em { color: #5a6268; font-size: 0.9em; }
        .market-pulse-list ul { list-style-type: disc; padding-left: 20px; }
        .market-pulse-list li { margin-bottom: 8px; }
        .market-pulse-list li em { color: #5a6268; font-size: 0.9em; }
        .footer { text-align: center; padding: 20px; font-size: 12px; color: #6c757d; background-color: #f1f3f5; border-top: 1px solid #dee2e6; }
        /* Styles for code blocks generated by markdown codehilite */
        .codehilite { background: #f8f8f8; border: 1px solid #ccc; padding: 10px; border-radius: 4px; overflow-x: auto; }
        .codehilite pre { margin: 0; background: transparent; border: none; padding: 0; } /* Reset pre styles within codehilite */
    </style>""")
    html_parts.append("</head>")
    html_parts.append("<body>")
    html_parts.append("<div class=\"container\">")

    # --- Header ---
    html_parts.append("<div class=\"header\">")
    html_parts.append(f"<h1>üöÄ AI Daily Digest</h1>")
    html_parts.append(f"<p>{date_str}</p>")
    html_parts.append("</div>")

    # --- ‚ú® Today's Overview Section ‚ú® ---
    html_parts.append("<div class=\"overview\">")
    html_parts.append("<h3>Today's Highlights:</h3>")
    html_parts.append("<ul>")
    html_parts.append(f"<li>Analysis of <strong>{len(news_items_data)} key AI developments</strong>.</li>")
    # Use the correctly extracted tutorial_topic
    html_parts.append(f"<li>Skill up tutorial on: <strong>{html.escape(tutorial_topic)}</strong>.</li>")
    # TODO: Optional theme detection could be added here later
    html_parts.append("</ul>")
    html_parts.append("</div>")

    # --- Helper to format a single item ---
    def format_item_html(item_data):
        parts = ["<div class='item'>"]
        escaped_title = html.escape(item_data.get('title', 'N/A'))
        item_url = item_data.get('url', '#')
        # Removed emoji from item H3
        parts.append(f"<h3>{escaped_title}</h3>")
        parts.append(f"<p class='source-link'><a href=\"{item_url}\" target=\"_blank\">{item_url}</a></p>")

        summary = item_data.get('summary')
        if summary:
             # Escape summary content, ensure no leading/trailing spaces or nbsp;
             summary_clean = html.escape(summary.strip()).replace('&amp;nbsp;', ' ')
             parts.append(f"<p><strong>Summary:</strong> {summary_clean}</p>")

        insight = item_data.get('insight')
        if insight:
             insight_clean = html.escape(insight.strip()).replace('&amp;nbsp;', ' ')
             parts.append(f"<p><strong>üí° Key Technical Insight:</strong> {insight_clean}</p>")

        angle = item_data.get('angle')
        if angle:
             angle_clean = html.escape(angle.strip()).replace('&amp;nbsp;', ' ')
             parts.append(f"<p><strong>üìä The Competitive Angle:</strong> {angle_clean}</p>")

        move = item_data.get('move')
        if move:
             move_clean = html.escape(move.strip()).replace('&amp;nbsp;', ' ')
             parts.append(f"<p><strong>üöÄ Your Potential Move:</strong> {move_clean}</p>")

        parts.append("</div>")
        return "\n".join(parts)

    # --- Top Headlines/Insights (News & Research) ---
    html_parts.append("<div class=\"section\">")
    html_parts.append(f"<h2>üì∞ Top Headlines & Insights</h2>")
    if news_items_data:
        for item_data in news_items_data:
            html_parts.append(format_item_html(item_data))
    else:
        html_parts.append("<p><em>No relevant news items found today.</em></p>")
    html_parts.append("</div>")

    # --- Skill Up Tutorial (Generated) ---
    html_parts.append("<div class=\"section\">")
    # Use HTML H2 tag directly here, not from Markdown conversion
    html_parts.append(f"<h2>üßë‚Äçüè´ Skill Up: Custom Tutorial - {html.escape(tutorial_topic)}</h2>")
    if generated_tutorial_html:
         # Insert the HTML converted from Markdown (with H2 already removed)
         html_parts.append(generated_tutorial_html)
    else:
        html_parts.append("<p><em>Tutorial generation failed or no topic selected today.</em></p>")
    html_parts.append("</div>")

    # --- Feed Tutorials ---
    html_parts.append("<div class=\"section\">")
    html_parts.append(f"<h2>‚öôÔ∏è Guides & Tutorials From Your Feeds</h2>")
    if feed_tutorials_data:
        for item_data in feed_tutorials_data:
             html_parts.append(format_item_html(item_data))
    else:
        html_parts.append("<p><em>No relevant tutorial items found in feeds today.</em></p>")
    html_parts.append("</div>")

    # --- Google Spotlight ---
    google_items_data_filtered = []
    google_keywords = ['google', 'gemini', 'deepmind', 'vertex', 'gcp', 'tensorflow']
    for item_data in news_items_data: # Check news items data only
        title_lower = item_data.get('title', '').lower()
        url_lower = item_data.get('url', '').lower()
        summary_lower = item_data.get('summary', '').lower() if item_data.get('summary') else ''
        insight_lower = item_data.get('insight', '').lower() if item_data.get('insight') else ''

        # Check keywords in title, url, summary, or insight
        is_google_related = False
        for keyword in google_keywords:
            if keyword in title_lower or keyword in url_lower or keyword in summary_lower or keyword in insight_lower:
                is_google_related = True
                break
        if is_google_related:
            google_items_data_filtered.append(item_data)

    html_parts.append("<div class=\"section\">")
    html_parts.append(f"<h2><img src=\"https://www.google.com/favicon.ico\" class=\"google-icon\" alt=\"G\"> Google Spotlight</h2>")
    if google_items_data_filtered:
        for item_data in google_items_data_filtered:
             html_parts.append(format_item_html(item_data))
    else:
        html_parts.append("<p><em>No specific Google-related news found in the top items today.</em></p>")
    html_parts.append("</div>")

    # --- Market Pulse ---
    market_pulse_points = []
    all_items_data = news_items_data + feed_tutorials_data
    processed_urls_for_market = set()

    for item_data in all_items_data:
        angle = item_data.get('angle')
        url = item_data.get('url')
        title = item_data.get('title', 'Source')

        if angle and url not in processed_urls_for_market:
            title_str = f" (from: <em>{html.escape(title)}</em>)" if title else ""
            market_pulse_points.append(f"<li>{html.escape(angle)}{title_str}</li>")
            if url: processed_urls_for_market.add(url)

    html_parts.append("<div class=\"section market-pulse-list\">")
    html_parts.append(f"<h2>üìä Market Pulse</h2>")
    if market_pulse_points:
        html_parts.append("<ul>")
        html_parts.extend(market_pulse_points)
        html_parts.append("</ul>")
    else:
        html_parts.append("<p><em>No specific market analysis points identified in today's items.</em></p>")
    html_parts.append("</div>")

    # --- Actionable Ideas ---
    actionable_ideas_list = []
    # all_items_data already defined
    processed_urls_for_ideas = set() # Avoid duplicate ideas from same source url

    for item_data in all_items_data:
        move = item_data.get('move')
        url = item_data.get('url')
        title = item_data.get('title', 'Source')

        if move and url not in processed_urls_for_ideas:
            title_str = f" (from: <em>{html.escape(title)}</em>)" if title else ""
            actionable_ideas_list.append(f"<li>{html.escape(move)}{title_str}</li>")
            if url: processed_urls_for_ideas.add(url)

    # Add the Actionable Ideas section using the list
    html_parts.append("<div class=\"section actionable-ideas-list\">")
    html_parts.append(f"<h2>üöÄ Actionable Ideas & Questions</h2>")
    if actionable_ideas_list:
        html_parts.append("<ul>")
        html_parts.extend(actionable_ideas_list)
        html_parts.append("</ul>")
    else:
        html_parts.append("<p><em>No specific actionable ideas identified in today's items.</em></p>")
    html_parts.append("</div>")

    # --- Footer ---
    html_parts.append("<div class=\"footer\">")
    html_parts.append("Generated by AI Digest Agent.")
    html_parts.append("</div>")

    # --- End HTML Document ---
    html_parts.append("</div>") # Close container
    html_parts.append("</body>")
    html_parts.append("</html>")

    logger.info("HTML Digest assembly complete.")
    return "\n".join(html_parts)

# --- Example Usage ---
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    # Dummy data using the new structured format
    dummy_news_data = [
        {
            'url': 'http://google.com/gemini',
            'title': 'Google Announces New Gemini Features',
            'type': 'Company Update',
            'summary': 'Google updated Gemini for better reasoning and added new vision capabilities.',
            'insight': 'Improved multi-modal processing allows integrating text and image analysis seamlessly.',
            'angle': 'This directly competes with OpenAI\'s GPT-4 vision capabilities, aiming to keep Google relevant in enterprise AI.',
            'move': 'Evaluate the new Gemini Vision API endpoint for automating visual content moderation in your app.'
        },
        {
            'url': 'http://competitor.com/model',
            'title': 'OpenAI Competitor Releases New Model',
            'type': 'Market/Competitor Info',
            'summary': 'Startup X released model Y, claiming state-of-the-art performance.',
            'insight': 'Model Y utilizes a novel sparse attention mechanism, potentially reducing compute costs.',
            'angle': 'Increases pressure on both OpenAI and Google, especially if cost/performance ratio is favorable.',
            'move': 'Benchmark model Y\'s API (if available) against your current LLM for a core text generation task, focusing on latency and cost.'
        }
    ]
    dummy_feed_tutorials_data = [
         {
            'url': 'http://langchain.dev/langgraph',
            'title': 'Intro to LangGraph for Agentic Workflows',
            'type': 'Tutorial/Guide',
            'summary': 'LangGraph provides tools for building stateful, multi-actor agent applications.',
            'insight': 'It uses a graph structure where nodes are computation steps and edges represent control flow, enabling cycles and complex state management.',
            'angle': 'Enhances the LangChain ecosystem, offering a more structured approach compared to simpler agent loops, potentially competing with frameworks like AutoGen.',
            'move': 'Refactor one of your existing complex agent workflows using LangGraph to see if it simplifies the state logic and improves maintainability.'
        }
    ]
    # Generated tutorial now expected as MARKDOWN
    dummy_generated_tutorial_md = """## üõ†Ô∏è Skill Up Tutorial: LangGraph Basics

**Objective:** Learn to build a simple LangGraph agent.
**Core Concepts:** Graphs for state, Nodes for functions/LLMs, Edges for control flow.
**Prerequisites:** `langgraph`, `langchain_openai`

**Step-by-Step Implementation:**
1. **Setup:**
   ```python
   import os
   from langgraph.graph import StateGraph, END
   from typing import TypedDict, Annotated
   import operator
   # Add API key setup
   # os.environ["OPENAI_API_KEY"] = "your_key_here"
   ```
   *Explanation:* Import necessary components.

2. **Define State:**
   ```python
   class AgentState(TypedDict):
       messages: Annotated[list, operator.add]
   ```
   *Explanation:* Define the structure to hold messages passed between nodes.

3. **Define Nodes:**
   ```python
   def call_model(state):
       # Replace with actual LLM call
       print("Calling model...")
       response = "Action: Do something" # Dummy response
       return {"messages": [response]}

   def take_action(state):
       # Replace with actual action execution
       print("Taking action...")
       result = "Action Result: OK"
       return {"messages": [result]}
   ```
   *Explanation:* Define functions representing agent steps (model call, action).

4. **Build Graph:**
   ```python
   workflow = StateGraph(AgentState)
   workflow.add_node("agent", call_model)
   workflow.add_node("action", take_action)
   workflow.set_entry_point("agent")
   # Simple conditional edge (replace with real logic)
   workflow.add_conditional_edges("agent", lambda x: "action" if "Action: " in x['messages'][-1] else END)
   workflow.add_edge("action", END)
   app = workflow.compile()
   ```
   *Explanation:* Construct the graph, defining nodes and transitions.

5. **Running the Example:**
   ```python
   if __name__ == "__main__":
       inputs = {"messages": ["User query"]}
       for output in app.stream(inputs):
           for key, value in output.items():
               print(f"Output from node '{key}': {value}")
   ```

**Key Considerations:** Error handling within nodes is crucial.
**Next Steps / Further Learning:** [LangGraph Docs](https://langchain.dev/docs/langgraph)
    """ # End Markdown

    final_digest_html = assemble_digest(dummy_news_data, dummy_feed_tutorials_data, dummy_generated_tutorial_md)

    print("\n--- Assembled HTML Digest --- ")
    # print(final_digest_html) # Avoid printing very long string to console

    # Save to a file for inspection
    try:
        with open("digest_preview.html", "w", encoding="utf-8") as f:
            f.write(final_digest_html)
        print("\nHTML Digest saved to digest_preview.html")
    except Exception as e:
        print(f"\nError saving HTML digest preview: {e}")

# Removed old Markdown helper functions as they are replaced by HTML parsing
# def extract_section(markdown_text, section_title): ...
# def extract_title_link(markdown_text): ... 